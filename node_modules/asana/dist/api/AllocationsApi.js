"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllocationsApi = void 0;
var _ApiClient = require("../ApiClient");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
var Collection = require('../utils/collection');

/**
* Allocations service.
* @module api/AllocationsApi
* @version 3.0.7
*/
var AllocationsApi = exports.AllocationsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AllocationsApi. 
  * @alias module:api/AllocationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  function AllocationsApi(apiClient) {
    _classCallCheck(this, AllocationsApi);
    this.apiClient = apiClient || _ApiClient.ApiClient.instance;
  }

  /**
   * Create an allocation
   * Creates a new allocation.  Returns the full record of the newly created allocation.
   * @param {module:model/Object} body The allocation to create.
   * @param {Object} opts Optional parameters
   * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
   */
  return _createClass(AllocationsApi, [{
    key: "createAllocationWithHttpInfo",
    value: function createAllocationWithHttpInfo(body, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAllocation");
      }
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/allocations', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Create an allocation
     * Creates a new allocation.  Returns the full record of the newly created allocation.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The allocation to create.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationResponseData}
     */
  }, {
    key: "createAllocation",
    value: function createAllocation(body, opts) {
      return this.createAllocationWithHttpInfo(body, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete an allocation
     * A specific, existing allocation can be deleted by making a DELETE request on the URL for that allocation.  Returns an empty data record.
     * @param {String} allocation_gid Globally unique identifier for the allocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "deleteAllocationWithHttpInfo",
    value: function deleteAllocationWithHttpInfo(allocation_gid) {
      var postBody = null;
      // verify the required parameter 'allocation_gid' is set
      if (allocation_gid === undefined || allocation_gid === null) {
        throw new Error("Missing the required parameter 'allocation_gid' when calling deleteAllocation");
      }
      var pathParams = {
        'allocation_gid': allocation_gid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/allocations/{allocation_gid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Delete an allocation
     * A specific, existing allocation can be deleted by making a DELETE request on the URL for that allocation.  Returns an empty data record.
     * @param {<&vendorExtensions.x-jsdoc-type>} allocation_gid Globally unique identifier for the allocation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmptyResponseData}
     */
  }, {
    key: "deleteAllocation",
    value: function deleteAllocation(allocation_gid) {
      return this.deleteAllocationWithHttpInfo(allocation_gid).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get an allocation
     * Returns the complete allocation record for a single allocation.
     * @param {String} allocation_gid Globally unique identifier for the allocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getAllocationWithHttpInfo",
    value: function getAllocationWithHttpInfo(allocation_gid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'allocation_gid' is set
      if (allocation_gid === undefined || allocation_gid === null) {
        throw new Error("Missing the required parameter 'allocation_gid' when calling getAllocation");
      }
      var pathParams = {
        'allocation_gid': allocation_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/allocations/{allocation_gid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get an allocation
     * Returns the complete allocation record for a single allocation.
     * @param {<&vendorExtensions.x-jsdoc-type>} allocation_gid Globally unique identifier for the allocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationResponseData}
     */
  }, {
    key: "getAllocation",
    value: function getAllocation(allocation_gid, opts) {
      return this.getAllocationWithHttpInfo(allocation_gid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get multiple allocations
     * Returns a list of allocations filtered to a specific project or user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent Globally unique identifier for the project to filter allocations by.
     * @param {String} opts.assignee Globally unique identifier for the user the allocation is assigned to.
     * @param {String} opts.workspace Globally unique identifier for the workspace.
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "getAllocationsWithHttpInfo",
    value: function getAllocationsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = [];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION) {
        return Collection.fromApiClient(this.apiClient.callApi('/allocations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType), this.apiClient, {
          'path': '/allocations',
          'httpMethod': 'GET',
          'pathParams': pathParams,
          'queryParams': queryParams,
          'headerParams': headerParams,
          'formParams': formParams,
          'bodyParam': postBody,
          'authNames': authNames,
          'contentTypes': contentTypes,
          'accepts': accepts,
          'returnType': returnType
        });
      }
      return this.apiClient.callApi('/allocations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Get multiple allocations
     * Returns a list of allocations filtered to a specific project or user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent Globally unique identifier for the project to filter allocations by.
     * @param {String} opts.assignee Globally unique identifier for the user the allocation is assigned to.
     * @param {String} opts.workspace Globally unique identifier for the workspace.
     * @param {Number} opts.limit Results per page. The number of objects to return per page. The value must be between 1 and 100.
     * @param {String} opts.offset Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. *Note: You can only pass in an offset that was returned to you via a previously paginated request.*
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationResponseArray}
     */
  }, {
    key: "getAllocations",
    value: function getAllocations(opts) {
      // Check if RETURN_COLLECTION is set and return a collection object if it is
      if (this.apiClient.RETURN_COLLECTION) {
        return this.getAllocationsWithHttpInfo(opts);
      }
      return this.getAllocationsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update an allocation
     * An existing allocation can be updated by making a PUT request on the URL for that allocation. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated allocation record.
     * @param {module:model/Object} body The updated fields for the allocation.
     * @param {String} allocation_gid Globally unique identifier for the allocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data and HTTP response
     */
  }, {
    key: "updateAllocationWithHttpInfo",
    value: function updateAllocationWithHttpInfo(body, allocation_gid, opts) {
      opts = opts || {};
      var postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAllocation");
      }
      // verify the required parameter 'allocation_gid' is set
      if (allocation_gid === undefined || allocation_gid === null) {
        throw new Error("Missing the required parameter 'allocation_gid' when calling updateAllocation");
      }
      var pathParams = {
        'allocation_gid': allocation_gid
      };
      var queryParams = {};
      opts = opts || {};
      queryParams = opts;
      var headerParams = {};
      var formParams = {};
      var authNames = ['personalAccessToken'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json; charset=UTF-8'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/allocations/{allocation_gid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * Update an allocation
     * An existing allocation can be updated by making a PUT request on the URL for that allocation. Only the fields provided in the &#x60;data&#x60; block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated allocation record.
     * @param {<&vendorExtensions.x-jsdoc-type>} body The updated fields for the allocation.
     * @param {<&vendorExtensions.x-jsdoc-type>} allocation_gid Globally unique identifier for the allocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.opt_fields This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationResponseData}
     */
  }, {
    key: "updateAllocation",
    value: function updateAllocation(body, allocation_gid, opts) {
      return this.updateAllocationWithHttpInfo(body, allocation_gid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();